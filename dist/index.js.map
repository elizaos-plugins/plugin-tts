{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport type {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@elizaos/core\";\nimport { fal } from \"@fal-ai/client\";\nimport { FAL_CONSTANTS, VOICE_MAP, getRandomVoice } from \"./constants\";\n\nimport * as fs from \"node:fs\";\nimport { Buffer } from \"node:buffer\";\nimport * as path from \"node:path\";\nimport * as process from \"node:process\";\nimport { detect } from 'langdetect';\n\nconst generateTTS = async (prompt: string, voice: string, runtime: IAgentRuntime) => {\n\n    process.env.FAL_KEY = FAL_CONSTANTS.API_KEY_SETTING || runtime.getSetting(\"FAL_API_KEY\");\n\n    try {\n        elizaLogger.log(\"Starting TTS generation with prompt:\", prompt);\n\n        const response = await fal.subscribe(FAL_CONSTANTS.API_TTS_ENDPOINT, {\n            input: {\n                input: prompt,\n                voice: voice\n            },\n            logs: true,\n            onQueueUpdate: (update) => {\n                if (update.status === \"IN_PROGRESS\") {\n                    update.logs\n                        .map((log) => log.message)\n                        .forEach(elizaLogger.debug);\n                }\n            },\n        });\n\n        elizaLogger.debug(\n            \"Generation request successful, received response:\",\n            response\n        );\n\n        return { success: true, data: response.data };\n    } catch (error) {\n        elizaLogger.error(\"TTS generation error:\", error);\n        return {\n            success: false,\n            error: error.message || \"Unknown error occurred\",\n        };\n    }\n};\n\nconst TTSGeneration: Action = {\n    name: \"GENERATE_TTS\",\n    similes: [\n        \"TTS_GENERATION\",\n        \"CREATE_TTS\",\n        \"TEXT2SPEECH\",\n        \"T2S\",\n        \"TEXT_TO_SPEECH\",\n        \"AUDIO_CREATE\",\n    ],\n    description: \"Generate a tts audio based on a text prompt\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.debug(\"Validating TTS action\");\n        const FalApiKey = runtime.getSetting(\"FAL_API_KEY\");\n        elizaLogger.debug(\"FAL_API_KEY present:\", !!FalApiKey);\n        return !!FalApiKey;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: Record<string, unknown>,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.debug(\"TTS request:\", message);\n        // Clean up the prompt by removing mentions and commands\n        const TTSPrompt = message.content.text\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\n            .replace(/generate TTS|create TTS|make TTS|render TTS/gi, \"\")\n            .trim();\n\n        if (!TTSPrompt || TTSPrompt.length < 3) {\n            callback({ text: \"Please input a word at least of length 3\" });\n            return;\n        }\n\n        elizaLogger.debug(\"TTS prompt:\", TTSPrompt);\n\n        callback({\n            text: `I'll generate an audio based on your prompt: \"${TTSPrompt}\". This might take a few seconds...`,\n        });\n\n        let target_voice: string;\n        try {\n            const language = detect(TTSPrompt);\n            if (language && language.length > 0) {\n            const voice_subject = VOICE_MAP[language[0].lang];\n            target_voice = getRandomVoice(voice_subject).fullName;\n            } else {\n            throw new Error(\"Language detection failed, no language detected.\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Language detection error:\", error);\n\n            // const defaultVoice = VOICE_MAP['en'];\n            const defaultVoice = VOICE_MAP.en;\n\n            target_voice = getRandomVoice(defaultVoice).fullName;\n        }\n\n        elizaLogger.debug(\"Starting TTS generation with prompt:\", TTSPrompt, \"and voice:\", target_voice);\n\n        try {\n            const result = await generateTTS(TTSPrompt, target_voice, runtime);\n\n            if (result.success && result.data.audio.url) {\n                const cachedFile = `content_cache/tts_${result.data.audio.file_name}`;\n                if (fs.existsSync(cachedFile)) {\n                    elizaLogger.debug(\"Using cached audio:\", cachedFile);\n                } else {\n                    const response = await fetch(result.data.audio.url);\n                    const arrayBuffer = await response.arrayBuffer();\n\n                    const directoryPath = path.dirname(cachedFile);\n                    if (!fs.existsSync(directoryPath)) {\n                        fs.mkdirSync(directoryPath, { recursive: true });\n                    }\n\n                    fs.writeFileSync(cachedFile, Buffer.from(arrayBuffer));\n                    elizaLogger.debug(\"Audio Duration:\", result.data.audio.duration);\n                }\n\n                callback({\n                    text: \"TTS Success! Here's your generated audio!\",\n                    attachments: [\n                        {\n                            id: crypto.randomUUID(),\n                            url: result.data.audio.url,\n                            title: \"TTS Generation\",\n                            source: \"TTSGeneration\",\n                            description: TTSPrompt,\n                            text: TTSPrompt,\n                        },\n                    ],\n                }, [cachedFile]);\n            } else {\n                callback({ text: `TTS generation failed: ${result.error}`, error: true });\n            }\n        } catch (error) {\n            elizaLogger.error(`Failed to generate TTS. Error: ${error}`);\n            callback({ text: `TTS generation failed: ${error.message}`, error: true });\n        }\n    },\n    examples: [\n        [\n            { user: \"{{user1}}\", content: { text: \"Generate a TTS of prompt: Hello world!\" } },\n            { user: \"{{agentName}}\", content: { text: \"I'll call a TTS to generate an audio based on your input prompt\", action: \"CREATE_TTS\" } },\n        ],\n        [\n            { user: \"{{user1}}\", content: { text: \"Please do TTS to a prompt: Sam is busy now\" } },\n            { user: \"{{agentName}}\", content: { text: \"Ok, please wait for the tts generation~\", action: \"AUDIO_CREATE\" } },\n        ],\n    ],\n};\n\nexport const TTSGenerationPlugin: Plugin = {\n    name: \"TTSGeneration\",\n    description: \"Generate TTS using PlayAI tts (v3)\",\n    actions: [TTSGeneration],\n    evaluators: [],\n    providers: [],\n};","export const FAL_CONSTANTS = {\n    API_TTS_ENDPOINT: \"fal-ai/playai/tts/v3\",\n    API_KEY_SETTING: \"FAL_API_KEY\", // The setting name to fetch from runtime\n};\n\nexport interface VoiceOption {\n    name: string;\n    style: \"Conversational\" | \"Narrative\" | \"Advertising\" | \"Meditation\";\n    region?: string;\n    fullName: string; \n  }\n\nexport const VOICE_MAP: Record<string, VoiceOption[]> = {\n    'en': [\n    { \n    name: \"Jennifer\", \n    style: \"Conversational\", \n    region: \"US/American\",\n    fullName: \"Jennifer (English (US)/American)\"\n    },\n    { \n    name: \"Dexter\", \n    style: \"Conversational\", \n    region: \"US/American\",\n    fullName: \"Dexter (English (US)/American)\"\n    },\n    { \n    name: \"Ava\", \n    style: \"Conversational\", \n    region: \"AU/Australian\",\n    fullName: \"Ava (English (AU)/Australian)\"\n    },\n    { \n    name: \"Tilly\", \n    style: \"Conversational\", \n    region: \"AU/Australian\",\n    fullName: \"Tilly (English (AU)/Australian)\"\n    },\n    { \n    name: \"Charlotte\", \n    style: \"Advertising\", \n    region: \"CA/Canadian\",\n    fullName: \"Charlotte (Advertising) (English (CA)/Canadian)\"\n    },\n    { \n    name: \"Charlotte\", \n    style: \"Meditation\", \n    region: \"CA/Canadian\",\n    fullName: \"Charlotte (Meditation) (English (CA)/Canadian)\"\n    },\n    { \n    name: \"Cecil\", \n    style: \"Conversational\", \n    region: \"GB/British\",\n    fullName: \"Cecil (English (GB)/British)\"\n    },\n    { \n    name: \"Sterling\", \n    style: \"Conversational\", \n    region: \"GB/British\",\n    fullName: \"Sterling (English (GB)/British)\"\n    },\n    { \n    name: \"Cillian\", \n    style: \"Conversational\", \n    region: \"IE/Irish\",\n    fullName: \"Cillian (English (IE)/Irish)\"\n    },\n    { \n    name: \"Madison\", \n    style: \"Conversational\", \n    region: \"IE/Irish\",\n    fullName: \"Madison (English (IE)/Irish)\"\n    },\n    { \n    name: \"Ada\", \n    style: \"Conversational\", \n    region: \"ZA/South african\",\n    fullName: \"Ada (English (ZA)/South african)\"\n    },\n    { \n    name: \"Sumita\", \n    style: \"Conversational\", \n    region: \"IN/Indian\",\n    fullName: \"Sumita (English (IN)/Indian)\"\n    },\n    { \n    name: \"Navya\", \n    style: \"Conversational\", \n    region: \"IN/Indian\",\n    fullName: \"Navya (English (IN)/Indian)\"\n    }\n        ],\n    'ja': [\n    { \n    name: \"Kiriko\", \n    style: \"Conversational\", \n    region: \"Japanese\",\n    fullName: \"Kiriko Conversational (Japanese/Japanese)\"\n    },\n    { \n    name: \"Kiriko\", \n    style: \"Narrative\", \n    region: \"Japanese\",\n    fullName: \"Kiriko Narrative (Japanese/Japanese)\"\n    }\n        ],\n    'af': [\n    { \n    name: \"Ronel\", \n    style: \"Conversational\", \n    region: \"South african\",\n    fullName: \"Ronel Conversational (Afrikaans/South african)\"\n    },\n    { \n    name: \"Ronel\", \n    style: \"Narrative\", \n    region: \"South african\",\n    fullName: \"Ronel Narrative (Afrikaans/South african)\"\n    }\n        ],\n    'ar': [\n    { \n    name: \"Abdo\", \n    style: \"Conversational\", \n    region: \"Arabic\",\n    fullName: \"Abdo Conversational (Arabic/Arabic)\"\n    },\n    { \n    name: \"Abdo\", \n    style: \"Narrative\", \n    region: \"Arabic\",\n    fullName: \"Abdo Narrative (Arabic/Arabic)\"\n    }\n        ],\n    'bn': [\n    { \n    name: \"Mousmi\", \n    style: \"Conversational\", \n    region: \"Bengali\",\n    fullName: \"Mousmi Conversational (Bengali/Bengali)\"\n    },\n    { \n    name: \"Mousmi\", \n    style: \"Narrative\", \n    region: \"Bengali\",\n    fullName: \"Mousmi Narrative (Bengali/Bengali)\"\n    }\n        ],\n    'pt': [\n    { \n    name: \"Caroline\", \n    style: \"Conversational\", \n    region: \"Brazilian\",\n    fullName: \"Caroline Conversational (Portuguese (BR)/Brazilian)\"\n    },\n    { \n    name: \"Caroline\", \n    style: \"Narrative\", \n    region: \"Brazilian\", \n    fullName: \"Caroline Narrative (Portuguese (BR)/Brazilian)\"\n    }\n        ],\n    'fr': [\n    { \n    name: \"Ange\", \n    style: \"Conversational\", \n    region: \"French\",\n    fullName: \"Ange Conversational (French/French)\"\n    },\n    { \n    name: \"Ange\", \n    style: \"Narrative\", \n    region: \"French\",\n    fullName: \"Ange Narrative (French/French)\"\n    },\n    { \n    name: \"Baptiste\", \n    style: \"Conversational\", \n    region: \"French\",\n    fullName: \"Baptiste (English (FR)/French)\"\n    }\n        ],\n    'de': [\n        { \n            name: \"Anke\", \n            style: \"Conversational\", \n            region: \"German\",\n            fullName: \"Anke Conversational (German/German)\"\n        },\n        { \n            name: \"Anke\", \n            style: \"Narrative\", \n            region: \"German\",\n            fullName: \"Anke Narrative (German/German)\"\n        }\n        ],\n    'es': [\n        { \n            name: \"Carmen\", \n            style: \"Conversational\", \n            region: \"Spanish\",\n            fullName: \"Carmen Conversational (Spanish/Spanish)\"\n        },\n        { \n            name: \"Patricia\", \n            style: \"Conversational\", \n            region: \"Spanish\",\n            fullName: \"Patricia Conversational (Spanish/Spanish)\"\n        }\n        ],\n    'ko': [\n        { \n            name: \"Dohee\", \n            style: \"Conversational\", \n            region: \"Korean\",\n            fullName: \"Dohee Conversational (Korean/Korean)\"\n        },\n        { \n            name: \"Dohee\", \n            style: \"Narrative\", \n            region: \"Korean\",\n            fullName: \"Dohee Narrative (Korean/Korean)\"\n        }\n        ],\n    'he': [\n    { \n      name: \"Mary\", \n      style: \"Conversational\", \n      region: \"Israeli\",\n      fullName: \"Mary Conversational (Hebrew/Israeli)\"\n    },\n    { \n      name: \"Mary\", \n      style: \"Narrative\", \n      region: \"Israeli\",\n      fullName: \"Mary Narrative (Hebrew/Israeli)\"\n    }\n    ],\n    'id': [\n    { \n      name: \"Ignatius\", \n      style: \"Conversational\", \n      region: \"Malay\",\n      fullName: \"Ignatius Conversational (Malay/Malay)\"\n    },\n    { \n      name: \"Ignatius\", \n      style: \"Narrative\", \n      region: \"Malay\",\n      fullName: \"Ignatius Narrative (Malay/Malay)\"\n    }\n    ],\n    'ru': [\n        { \n          name: \"Andrei\", \n          style: \"Conversational\", \n          region: \"Russian\",\n          fullName: \"Andrei Conversational (Russian/Russian)\"\n        },\n        { \n          name: \"Andrei\", \n          style: \"Narrative\", \n          region: \"Russian\",\n          fullName: \"Andrei Narrative (Russian/Russian)\"\n        }\n      ],\n    'tl': [\n        { \n          name: \"Aiken\", \n          style: \"Conversational\", \n          region: \"Filipino\",\n          fullName: \"Aiken Conversational (Tagalog/Filipino)\"\n        },\n        { \n          name: \"Aiken\", \n          style: \"Narrative\", \n          region: \"Filipino\",\n          fullName: \"Aiken Narrative (Tagalog/Filipino)\"\n        }\n      ],\n    'mk': [\n    { \n        name: \"Aleksa\", \n        style: \"Conversational\", \n        region: \"Serbian\",\n        fullName: \"Aleksa Conversational (Serbian/Serbian)\"\n    },\n    { \n        name: \"Aleksa\", \n        style: \"Narrative\", \n        region: \"Serbian\",\n        fullName: \"Aleksa Narrative (Serbian/Serbian)\"\n    }\n    ],\n    'ne': [\n    { \n        name: \"Anuj\", \n        style: \"Conversational\", \n        region: \"Indian\",\n        fullName: \"Anuj Conversational (Hindi/Indian)\"\n    },\n    { \n        name: \"Anuj\", \n        style: \"Narrative\", \n        region: \"Indian\",\n        fullName: \"Anuj Narrative (Hindi/Indian)\"\n    }\n    ],\n    'th': [\n        { \n          name: \"Katbundit\", \n          style: \"Conversational\", \n          region: \"Thai\",\n          fullName: \"Katbundit Conversational (Thai/Thai)\"\n        },\n        { \n          name: \"Katbundit\", \n          style: \"Narrative\", \n          region: \"Thai\",\n          fullName: \"Katbundit Narrative (Thai/Thai)\"\n        }\n      ],\n    'tr': [\n    { \n        name: \"Ali\", \n        style: \"Conversational\", \n        region: \"Turkish\",\n        fullName: \"Ali Conversational (Turkish/Turkish)\"\n    },\n    { \n        name: \"Ali\", \n        style: \"Narrative\", \n        region: \"Turkish\",\n        fullName: \"Ali Narrative (Turkish/Turkish)\"\n    }\n    ],\n};\n\nexport const getRandomVoice = (voiceOptions: VoiceOption[]): VoiceOption => {\n    const randomIndex = Math.floor(Math.random() * voiceOptions.length);\n    return voiceOptions[randomIndex];\n  };\n"],"mappings":"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","names":[]}